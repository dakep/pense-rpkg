% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/residuals-methods.R
\name{predict.pense_cvfit}
\alias{predict.pense_cvfit}
\title{Predict Method for PENSE Fits}
\usage{
\method{predict}{pense_cvfit}(
  object,
  newdata,
  lambda = c("min", "se"),
  se_mult = 1,
  exact = deprecated(),
  correction = deprecated(),
  ...
)
}
\arguments{
\item{object}{PENSE with cross-validated hyper-parameters to extract coefficients from.}

\item{newdata}{an optional matrix of new predictor values. If missing, the fitted values are computed.}

\item{lambda}{either a string specifying which penalty level to use or a a single numeric value of the penalty
parameter. See details.}

\item{se_mult}{If \code{lambda = "se"}, the multiple of standard errors to tolerate.}

\item{exact}{deprecated. Always gives a warning if \code{lambda} is not part of the fitted sequence and coefficients
are interpolated.}

\item{correction}{defunct.}

\item{...}{currently not used.}
}
\value{
a numeric vector of residuals for the given penalization level.
}
\description{
Predict response values using a PENSE (or LS-EN) regularization path with hyper-parameters chosen by
cross-validation.
}
\details{
If \code{lambda = "se"} and \code{object} contains fitted estimates for every penalization level in the sequence, extract the
residuals of the most parsimonious model with prediction performance statistically indistinguishable from the best
model. This is determined to be the model with prediction performance within \code{se_mult * cv_se} from the best model.
}
\examples{
# Compute the LS-EN regularization path for Freeny's revenue data
# (see ?freeny)
data(freeny)
x <- as.matrix(freeny[ , 2:5])

regpath <- elnet(x, freeny$y, alpha = 0.75)

# Predict the response using a specific penalization level
predict(regpath, newdata = freeny[1:5, 2:5],
        lambda = regpath$lambda[10])

# Extract the residuals at a certain penalization level
residuals(regpath, lambda = regpath$lambda[5])

# Select penalization level via cross-validation
cv_results <- elnet_cv(x, freeny$y, alpha = 0.5, cv_repl = 10,
                       cv_k = 4)

# Predict the response using the "best" penalization level
predict(cv_results, newdata = freeny[1:5, 2:5])

# Extract the residuals at the "best" penalization level
residuals(cv_results)^2
# Extract the residuals at a more parsimonious penalization level
residuals(cv_results, lambda = 'se')
}
\seealso{
Other functions for extracting components: 
\code{\link{coef.pense_cvfit}()},
\code{\link{coef.pense_fit}()},
\code{\link{predict.pense_fit}()},
\code{\link{residuals.pense_cvfit}()},
\code{\link{residuals.pense_fit}()}
}
\concept{functions for extracting components}
